{"version":3,"file":"js/690.0ca1d58a.js","mappings":"gMAGO,SAASA,EAAmBC,GACjC,MAAMC,EAAOD,EAAGE,wBACVC,EAAQC,iBAAiBJ,GACzBK,EAAKF,EAAMG,UAEjB,GAAID,EAAI,CACN,IAAIE,EAAIC,EAAIC,EAAIC,EAAIC,EACpB,GAAIN,EAAGO,WAAW,aAChBL,EAAKF,EAAGQ,MAAM,GAAI,GAAGC,MAAM,MAC3BN,GAAMD,EAAG,GACTE,GAAMF,EAAG,GACTG,GAAMH,EAAG,IACTI,GAAMJ,EAAG,QACJ,KAAIF,EAAGO,WAAW,WAOvB,OAAO,IAAIG,EAAAA,EAAId,GANfM,EAAKF,EAAGQ,MAAM,GAAI,GAAGC,MAAM,MAC3BN,GAAMD,EAAG,GACTE,GAAMF,EAAG,GACTG,GAAMH,EAAG,GACTI,GAAMJ,EAAG,EAGX,CAEA,MAAMS,EAAKb,EAAMc,gBACXC,EAAIjB,EAAKiB,EAAIR,GAAM,EAAIF,GAAMW,WAAWH,GACxCI,EAAInB,EAAKmB,EAAIT,GAAM,EAAIF,GAAMU,WAAWH,EAAGH,MAAMG,EAAGK,QAAQ,KAAO,IACnEC,EAAId,EAAKP,EAAKsB,MAAQf,EAAKR,EAAGwB,YAAc,EAC5CC,EAAIhB,EAAKR,EAAKyB,OAASjB,EAAKT,EAAG2B,aAAe,EAEpD,OAAO,IAAIZ,EAAAA,EAAI,CAAEG,IAAGE,IAAGG,MAAOD,EAAGI,OAAQD,GAC3C,CACE,OAAO,IAAIV,EAAAA,EAAId,EAEnB,CAEO,SAAS2B,EACd5B,EACA6B,EACAC,GAEA,GAA0B,qBAAf9B,EAAG4B,QAAyB,MAAO,CAAEG,SAAUC,QAAQC,WAElE,MAAMC,EAAYlC,EAAG4B,QAAQC,EAAWC,GASxC,MARkC,qBAAvBI,EAAUH,WAClBG,EAAkBH,SAAW,IAAIC,SAAQC,IACxCC,EAAUC,SAAW,KACnBF,EAAQC,EAAU,CACnB,KAIEA,CACT,C,8ECvDO,MAAMnB,EAMXqB,YAAW,GAKR,IALU,EAAElB,EAAC,EAAEE,EAAC,MAAEG,EAAK,OAAEG,GAK3B,EACCW,KAAKnB,EAAIA,EACTmB,KAAKjB,EAAIA,EACTiB,KAAKd,MAAQA,EACbc,KAAKX,OAASA,CAChB,CAEIY,UAAS,OAAOD,KAAKjB,CAAE,CACvBmB,aAAY,OAAOF,KAAKjB,EAAIiB,KAAKX,MAAO,CACxCc,WAAU,OAAOH,KAAKnB,CAAE,CACxBuB,YAAW,OAAOJ,KAAKnB,EAAImB,KAAKd,KAAM,EAGrC,SAASmB,EAAaC,EAAQC,GACnC,MAAO,CACL1B,EAAG,CACD2B,OAAQC,KAAKC,IAAI,EAAGH,EAAEJ,KAAOG,EAAEH,MAC/BQ,MAAOF,KAAKC,IAAI,EAAGJ,EAAEF,MAAQG,EAAEH,QAEjCrB,EAAG,CACDyB,OAAQC,KAAKC,IAAI,EAAGH,EAAEN,IAAMK,EAAEL,KAC9BU,MAAOF,KAAKC,IAAI,EAAGJ,EAAEJ,OAASK,EAAEL,SAGtC,C,wGCnCO,MAAMU,EAAiB,+BACjBC,EAAoB,+BACpBC,EAAoB,4B","sources":["webpack://opencdms-app/../../src/util/animation.ts","webpack://opencdms-app/../../src/util/box.ts","webpack://opencdms-app/../../src/util/easing.ts"],"sourcesContent":["import { Box } from '@/util/box'\n\n/** @see https://stackoverflow.com/a/57876601/2074736 */\nexport function nullifyTransforms (el: HTMLElement): Box {\n  const rect = el.getBoundingClientRect()\n  const style = getComputedStyle(el)\n  const tx = style.transform\n\n  if (tx) {\n    let ta, sx, sy, dx, dy\n    if (tx.startsWith('matrix3d(')) {\n      ta = tx.slice(9, -1).split(/, /)\n      sx = +ta[0]\n      sy = +ta[5]\n      dx = +ta[12]\n      dy = +ta[13]\n    } else if (tx.startsWith('matrix(')) {\n      ta = tx.slice(7, -1).split(/, /)\n      sx = +ta[0]\n      sy = +ta[3]\n      dx = +ta[4]\n      dy = +ta[5]\n    } else {\n      return new Box(rect)\n    }\n\n    const to = style.transformOrigin\n    const x = rect.x - dx - (1 - sx) * parseFloat(to)\n    const y = rect.y - dy - (1 - sy) * parseFloat(to.slice(to.indexOf(' ') + 1))\n    const w = sx ? rect.width / sx : el.offsetWidth + 1\n    const h = sy ? rect.height / sy : el.offsetHeight + 1\n\n    return new Box({ x, y, width: w, height: h })\n  } else {\n    return new Box(rect)\n  }\n}\n\nexport function animate (\n  el: Element,\n  keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\n  options?: number | KeyframeAnimationOptions\n) {\n  if (typeof el.animate === 'undefined') return { finished: Promise.resolve() }\n\n  const animation = el.animate(keyframes, options)\n  if (typeof animation.finished === 'undefined') {\n    (animation as any).finished = new Promise(resolve => {\n      animation.onfinish = () => {\n        resolve(animation)\n      }\n    })\n  }\n\n  return animation\n}\n","export class Box {\n  x: number\n  y: number\n  width: number\n  height: number\n\n  constructor ({ x, y, width, height }: {\n    x: number\n    y: number\n    width: number\n    height: number\n  }) {\n    this.x = x\n    this.y = y\n    this.width = width\n    this.height = height\n  }\n\n  get top () { return this.y }\n  get bottom () { return this.y + this.height }\n  get left () { return this.x }\n  get right () { return this.x + this.width }\n}\n\nexport function getOverflow (a: Box, b: Box) {\n  return {\n    x: {\n      before: Math.max(0, b.left - a.left),\n      after: Math.max(0, a.right - b.right),\n    },\n    y: {\n      before: Math.max(0, b.top - a.top),\n      after: Math.max(0, a.bottom - b.bottom),\n    },\n  }\n}\n","export const standardEasing = 'cubic-bezier(0.4, 0, 0.2, 1)'\nexport const deceleratedEasing = 'cubic-bezier(0.0, 0, 0.2, 1)' // Entering\nexport const acceleratedEasing = 'cubic-bezier(0.4, 0, 1, 1)' // Leaving\n"],"names":["nullifyTransforms","el","rect","getBoundingClientRect","style","getComputedStyle","tx","transform","ta","sx","sy","dx","dy","startsWith","slice","split","Box","to","transformOrigin","x","parseFloat","y","indexOf","w","width","offsetWidth","h","height","offsetHeight","animate","keyframes","options","finished","Promise","resolve","animation","onfinish","constructor","this","top","bottom","left","right","getOverflow","a","b","before","Math","max","after","standardEasing","deceleratedEasing","acceleratedEasing"],"sourceRoot":""}