{"version":3,"file":"js/2113.53e1d30b.js","mappings":"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","sources":["webpack://opencdms-app/../../../src/components/VAutocomplete/VAutocomplete.tsx","webpack://opencdms-app/../../src/composables/filter.ts"],"sourcesContent":["// Styles\nimport './VAutocomplete.sass'\n\n// Components\nimport { makeSelectProps } from '@/components/VSelect/VSelect'\nimport { VCheckboxBtn } from '@/components/VCheckbox'\nimport { VChip } from '@/components/VChip'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VList, VListItem } from '@/components/VList'\nimport { VMenu } from '@/components/VMenu'\nimport { VTextField } from '@/components/VTextField'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { makeFilterProps, useFilter } from '@/composables/filter'\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useForm } from '@/composables/form'\nimport { useItems } from '@/composables/items'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utility\nimport { computed, mergeProps, nextTick, ref, watch } from 'vue'\nimport { genericComponent, omit, useRender, wrapInArray } from '@/util'\nimport { filterVTextFieldProps, makeVTextFieldProps } from '../VTextField/VTextField'\n\n// Types\nimport type { FilterMatch } from '@/composables/filter'\nimport type { InternalItem } from '@/composables/items'\nimport type { MakeSlots, SlotsToProps } from '@/util'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nfunction highlightResult (text: string, matches: FilterMatch | undefined, length: number) {\n  if (matches == null) return text\n\n  if (Array.isArray(matches)) throw new Error('Multiple matches is not implemented')\n\n  return typeof matches === 'number' && ~matches\n    ? (\n      <>\n        <span class=\"v-autocomplete__unmask\">{ text.substr(0, matches) }</span>\n        <span class=\"v-autocomplete__mask\">{ text.substr(matches, length) }</span>\n        <span class=\"v-autocomplete__unmask\">{ text.substr(matches + length) }</span>\n      </>\n    )\n    : text\n}\n\ntype Primitive = string | number | boolean | symbol\n\ntype Val <T, ReturnObject extends boolean> = T extends Primitive\n  ? T\n  : (ReturnObject extends true ? T : any)\n\ntype Value <T, ReturnObject extends boolean, Multiple extends boolean> =\n  Multiple extends true\n    ? readonly Val<T, ReturnObject>[]\n    : Val<T, ReturnObject>\n\nexport const VAutocomplete = genericComponent<new <\n  T,\n  ReturnObject extends boolean = false,\n  Multiple extends boolean = false,\n  V extends Value<T, ReturnObject, Multiple> = Value<T, ReturnObject, Multiple>\n>() => {\n  $props: {\n    items?: readonly T[]\n    returnObject?: ReturnObject\n    multiple?: Multiple\n    modelValue?: V\n    'onUpdate:modelValue'?: (val: V) => void\n  } & SlotsToProps<\n    Omit<VInputSlots & VFieldSlots, 'default'> & MakeSlots<{\n      item: [{ item: InternalItem<T>, index: number, props: Record<string, unknown> }]\n      chip: [{ item: InternalItem<T>, index: number, props: Record<string, unknown> }]\n      selection: [{ item: InternalItem<T>, index: number }]\n      'prepend-item': []\n      'append-item': []\n      'no-data': []\n    }>\n  >\n}>()({\n  name: 'VAutocomplete',\n\n  props: {\n    // TODO: implement post keyboard support\n    // autoSelectFirst: Boolean,\n    search: String,\n\n    ...makeFilterProps({ filterKeys: ['title'] }),\n    ...makeSelectProps(),\n    ...omit(makeVTextFieldProps({\n      modelValue: null,\n    }), ['validationValue', 'dirty', 'appendInnerIcon']),\n    ...makeTransitionProps({ transition: false }),\n  },\n\n  emits: {\n    'update:search': (val: any) => true,\n    'update:modelValue': (val: any) => true,\n    'update:menu': (val: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const { t } = useLocale()\n    const vTextFieldRef = ref()\n    const isFocused = ref(false)\n    const isPristine = ref(true)\n    const vMenuRef = ref<VMenu>()\n    const _menu = useProxiedModel(props, 'menu')\n    const menu = computed({\n      get: () => _menu.value,\n      set: v => {\n        if (_menu.value && !v && vMenuRef.value?.ΨopenChildren) return\n        _menu.value = v\n      },\n    })\n    const { items, transformIn, transformOut } = useItems(props)\n    const search = useProxiedModel(props, 'search', '')\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      [],\n      v => transformIn(wrapInArray(v)),\n      v => {\n        const transformed = transformOut(v)\n        return props.multiple ? transformed : (transformed[0] ?? null)\n      }\n    )\n    const form = useForm()\n    const { filteredItems, getMatches } = useFilter(props, items, computed(() => isPristine.value ? undefined : search.value))\n    const selections = computed(() => {\n      return model.value.map(v => {\n        return items.value.find(item => props.valueComparator(item.value, v.value)) || v\n      })\n    })\n\n    const displayItems = computed(() => {\n      if (props.hideSelected) {\n        return filteredItems.value.filter(filteredItem => !selections.value.some(s => s.value === filteredItem.value))\n      }\n      return filteredItems.value\n    })\n\n    const selected = computed(() => selections.value.map(selection => selection.props.value))\n    const listRef = ref<VList>()\n\n    function onClear (e: MouseEvent) {\n      if (props.openOnClear) {\n        menu.value = true\n      }\n\n      search.value = ''\n    }\n    function onMousedownControl () {\n      if (\n        (props.hideNoData && !items.value.length) ||\n        props.readonly || form?.isReadonly.value\n      ) return\n\n      menu.value = true\n    }\n    function onKeydown (e: KeyboardEvent) {\n      if (props.readonly || form?.isReadonly.value) return\n\n      if (['Enter', 'ArrowDown', 'ArrowUp'].includes(e.key)) {\n        e.preventDefault()\n      }\n\n      if (['Enter', 'ArrowDown'].includes(e.key)) {\n        menu.value = true\n      }\n\n      if (['Escape'].includes(e.key)) {\n        menu.value = false\n      }\n\n      if (['Enter', 'Escape', 'Tab'].includes(e.key)) {\n        isPristine.value = true\n      }\n\n      if (e.key === 'ArrowDown') {\n        listRef.value?.focus('next')\n      } else if (e.key === 'ArrowUp') {\n        listRef.value?.focus('prev')\n      }\n    }\n\n    function onInput (e: InputEvent) {\n      search.value = (e.target as HTMLInputElement).value\n    }\n\n    function onAfterLeave () {\n      if (isFocused.value) isPristine.value = true\n    }\n\n    function onFocusin (e: FocusEvent) {\n      isFocused.value = true\n    }\n\n    function onFocusout (e: FocusEvent) {\n      if (e.relatedTarget == null) {\n        vTextFieldRef.value?.focus()\n      }\n    }\n\n    const isSelecting = ref(false)\n\n    function select (item: InternalItem) {\n      if (props.multiple) {\n        const index = selected.value.findIndex(selection => props.valueComparator(selection, item.value))\n\n        if (index === -1) {\n          model.value = [...model.value, item]\n          search.value = ''\n        } else {\n          const value = [...model.value]\n          value.splice(index, 1)\n          model.value = value\n        }\n      } else {\n        model.value = [item]\n\n        isSelecting.value = true\n\n        if (!slots.selection) {\n          search.value = item.title\n        }\n\n        menu.value = false\n        isPristine.value = true\n\n        nextTick(() => (isSelecting.value = false))\n      }\n    }\n\n    watch(isFocused, val => {\n      if (val) {\n        isSelecting.value = true\n        search.value = props.multiple || !!slots.selection ? '' : String(selections.value.at(-1)?.props.title ?? '')\n        isPristine.value = true\n\n        nextTick(() => isSelecting.value = false)\n      } else {\n        menu.value = false\n        search.value = ''\n      }\n    })\n\n    watch(search, val => {\n      if (!isFocused.value || isSelecting.value) return\n\n      if (val) menu.value = true\n\n      isPristine.value = !val\n    })\n\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip)\n      const hasList = !!((!props.hideNoData || displayItems.value.length) || slots.prepend || slots.append || slots['no-data'])\n      const [textFieldProps] = filterVTextFieldProps(props)\n\n      return (\n        <VTextField\n          ref={ vTextFieldRef }\n          { ...textFieldProps }\n          modelValue={ search.value }\n          onUpdate:modelValue={ v => { if (v == null) model.value = [] } }\n          validationValue={ model.externalValue }\n          dirty={ model.value.length > 0 }\n          onInput={ onInput }\n          class={[\n            'v-autocomplete',\n            {\n              'v-autocomplete--active-menu': menu.value,\n              'v-autocomplete--chips': !!props.chips,\n              [`v-autocomplete--${props.multiple ? 'multiple' : 'single'}`]: true,\n              'v-autocomplete--selection-slot': !!slots.selection,\n            },\n          ]}\n          appendInnerIcon={ props.menuIcon }\n          readonly={ props.readonly }\n          onClick:clear={ onClear }\n          onMousedown:control={ onMousedownControl }\n          onFocus={ () => isFocused.value = true }\n          onBlur={ () => isFocused.value = false }\n          onKeydown={ onKeydown }\n        >\n          {{\n            ...slots,\n            default: () => (\n              <>\n                <VMenu\n                  ref={ vMenuRef }\n                  v-model={ menu.value }\n                  activator=\"parent\"\n                  contentClass=\"v-autocomplete__content\"\n                  eager={ props.eager }\n                  maxHeight={ 310 }\n                  openOnClick={ false }\n                  closeOnContentClick={ false }\n                  transition={ props.transition }\n                  onAfterLeave={ onAfterLeave }\n                  { ...props.menuProps }\n                >\n                  { hasList && (\n                    <VList\n                      ref={ listRef }\n                      selected={ selected.value }\n                      selectStrategy={ props.multiple ? 'independent' : 'single-independent' }\n                      onMousedown={ (e: MouseEvent) => e.preventDefault() }\n                      onFocusin={ onFocusin }\n                      onFocusout={ onFocusout }\n                    >\n                      { !displayItems.value.length && !props.hideNoData && (slots['no-data']?.() ?? (\n                        <VListItem title={ t(props.noDataText) } />\n                      )) }\n\n                      { slots['prepend-item']?.() }\n\n                      { displayItems.value.map((item, index) => slots.item?.({\n                        item,\n                        index,\n                        props: mergeProps(item.props, { onClick: () => select(item) }),\n                      }) ?? (\n                        <VListItem\n                          key={ index }\n                          { ...item.props }\n                          onClick={ () => select(item) }\n                        >\n                          {{\n                            prepend: ({ isSelected }) => props.multiple && !props.hideSelected ? (\n                              <VCheckboxBtn modelValue={ isSelected } ripple={ false } />\n                            ) : undefined,\n                            title: () => {\n                              return isPristine.value\n                                ? item.title\n                                : highlightResult(item.title, getMatches(item)?.title, search.value?.length ?? 0)\n                            },\n                          }}\n                        </VListItem>\n                      )) }\n\n                      { slots['append-item']?.() }\n                    </VList>\n                  ) }\n                </VMenu>\n\n                { selections.value.map((item, index) => {\n                  function onChipClose (e: Event) {\n                    e.stopPropagation()\n                    e.preventDefault()\n\n                    select(item)\n                  }\n\n                  const slotProps = {\n                    'onClick:close': onChipClose,\n                    modelValue: true,\n                    'onUpdate:modelValue': undefined,\n                  }\n\n                  return (\n                    <div key={ item.value } class=\"v-autocomplete__selection\">\n                      { hasChips ? (\n                        <VDefaultsProvider\n                          defaults={{\n                            VChip: {\n                              closable: props.closableChips,\n                              size: 'small',\n                              text: item.title,\n                            },\n                          }}\n                        >\n                          { slots.chip\n                            ? slots.chip({ item, index, props: slotProps })\n                            : (<VChip { ...slotProps } />)\n                          }\n                        </VDefaultsProvider>\n                      ) : (\n                        slots.selection\n                          ? slots.selection({ item, index })\n                          : (\n                            <span class=\"v-autocomplete__selection-text\">\n                              { item.title }\n                              { props.multiple && (index < selections.value.length - 1) && (\n                                <span class=\"v-autocomplete__selection-comma\">,</span>\n                              ) }\n                            </span>\n                          )\n                      )}\n                    </div>\n                  )\n                }) }\n              </>\n            ),\n          }}\n        </VTextField>\n      )\n    })\n\n    return forwardRefs({\n      isFocused,\n      isPristine,\n      menu,\n      search,\n      filteredItems,\n      select,\n    }, vTextFieldRef)\n  },\n})\n\nexport type VAutocomplete = InstanceType<typeof VAutocomplete>\n","/* eslint-disable max-statements */\n/* eslint-disable no-labels */\n\n// Utilities\nimport { getPropertyFromItem, propsFactory, wrapInArray } from '@/util'\nimport { computed, ref, unref, watchEffect } from 'vue'\n\n// Types\nimport type { PropType, Ref } from 'vue'\nimport type { MaybeRef } from '@/util'\nimport type { InternalItem } from './items'\n\n/**\n * - match without highlight\n * - single match (index), length already known\n * - single match (start, end)\n * - multiple matches (start, end), probably shouldn't overlap\n */\nexport type FilterMatch = boolean | number | [number, number] | [number, number][]\nexport type FilterFunction = (value: string, query: string, item?: any) => FilterMatch\nexport type FilterKeyFunctions = Record<string, FilterFunction>\nexport type FilterKeys = string | string[]\nexport type FilterMode = 'some' | 'every' | 'union' | 'intersection'\n\nexport interface FilterProps {\n  customFilter?: FilterFunction\n  customKeyFilter?: FilterKeyFunctions\n  filterKeys?: FilterKeys\n  filterMode?: FilterMode\n  noFilter?: boolean\n}\n\n// Composables\nexport const defaultFilter: FilterFunction = (value, query, item) => {\n  if (value == null || query == null) return -1\n\n  return value.toString().toLocaleLowerCase().indexOf(query.toString().toLocaleLowerCase())\n}\n\nexport const makeFilterProps = propsFactory({\n  customFilter: Function as PropType<FilterFunction>,\n  customKeyFilter: Object as PropType<FilterKeyFunctions>,\n  filterKeys: [Array, String] as PropType<FilterKeys>,\n  filterMode: {\n    type: String as PropType<FilterMode>,\n    default: 'intersection',\n  },\n  noFilter: Boolean,\n}, 'filter')\n\nexport function filterItems (\n  items: InternalItem[],\n  query: string,\n  options?: {\n    customKeyFilter?: FilterKeyFunctions\n    default?: FilterFunction\n    filterKeys?: FilterKeys\n    filterMode?: FilterMode\n    noFilter?: boolean\n  },\n) {\n  const array: { index: number, matches: Record<string, FilterMatch> }[] = []\n  // always ensure we fall back to a functioning filter\n  const filter = options?.default ?? defaultFilter\n  const keys = options?.filterKeys ? wrapInArray(options.filterKeys) : false\n  const customFiltersLength = Object.keys(options?.customKeyFilter ?? {}).length\n\n  if (!items?.length) return array\n\n  loop:\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i]\n    const customMatches: Record<string, FilterMatch> = {}\n    const defaultMatches: Record<string, FilterMatch> = {}\n    let match: FilterMatch = -1\n\n    if (query && !options?.noFilter) {\n      if (typeof item === 'object') {\n        const filterKeys = keys || Object.keys(item)\n\n        for (const key of filterKeys) {\n          const value = getPropertyFromItem(item as any, key, item)\n          const keyFilter = options?.customKeyFilter?.[key]\n\n          match = keyFilter\n            ? keyFilter(value, query, item)\n            : filter(value, query, item)\n\n          if (match !== -1 && match !== false) {\n            if (keyFilter) customMatches[key] = match\n            else defaultMatches[key] = match\n          } else if (options?.filterMode === 'every') {\n            continue loop\n          }\n        }\n      } else {\n        match = filter(item, query, item)\n        if (match !== -1 && match !== false) {\n          defaultMatches.title = match\n        }\n      }\n\n      const defaultMatchesLength = Object.keys(defaultMatches).length\n      const customMatchesLength = Object.keys(customMatches).length\n\n      if (!defaultMatchesLength && !customMatchesLength) continue\n\n      if (\n        options?.filterMode === 'union' &&\n        customMatchesLength !== customFiltersLength &&\n        !defaultMatchesLength\n      ) continue\n\n      if (\n        options?.filterMode === 'intersection' &&\n        (\n          customMatchesLength !== customFiltersLength ||\n          !defaultMatchesLength\n        )\n      ) continue\n    }\n\n    array.push({ index: i, matches: { ...defaultMatches, ...customMatches } })\n  }\n\n  return array\n}\n\nexport function useFilter <T extends InternalItem> (\n  props: FilterProps,\n  items: MaybeRef<T[]>,\n  query: Ref<string | undefined>,\n  options?: {\n    filterKeys?: MaybeRef<FilterKeys>\n  }\n) {\n  const strQuery = computed(() => (\n    typeof query?.value !== 'string' &&\n    typeof query?.value !== 'number'\n  ) ? '' : String(query.value))\n\n  const filteredItems: Ref<T[]> = ref([])\n  const filteredMatches: Ref<Map<unknown, Record<string, FilterMatch>>> = ref(new Map())\n\n  watchEffect(() => {\n    filteredItems.value = []\n    filteredMatches.value = new Map()\n\n    const transformedItems = unref(items)\n    const results = filterItems(\n      transformedItems,\n      strQuery.value,\n      {\n        customKeyFilter: props.customKeyFilter,\n        default: props.customFilter,\n        filterKeys: unref(options?.filterKeys) ?? props.filterKeys,\n        filterMode: props.filterMode,\n        noFilter: props.noFilter,\n      },\n    )\n\n    results.forEach(({ index, matches }) => {\n      const item = transformedItems[index]\n      filteredItems.value.push(item)\n      filteredMatches.value.set(item.value, matches)\n    })\n  })\n\n  function getMatches (item: T) {\n    return filteredMatches.value.get(item.value)\n  }\n\n  return { filteredItems, filteredMatches, getMatches }\n}\n"],"names":["highlightResult","text","matches","length","Array","isArray","Error","substr","VAutocomplete","genericComponent","name","props","search","String","makeFilterProps","filterKeys","makeSelectProps","omit","makeVTextFieldProps","modelValue","makeTransitionProps","transition","emits","val","setup","slots","t","useLocale","vTextFieldRef","ref","isFocused","isPristine","vMenuRef","_menu","useProxiedModel","menu","computed","get","value","set","v","ΨopenChildren","items","transformIn","transformOut","useItems","model","wrapInArray","transformed","multiple","form","useForm","filteredItems","getMatches","useFilter","undefined","selections","map","find","item","valueComparator","displayItems","hideSelected","filter","filteredItem","some","s","selected","selection","listRef","onClear","e","openOnClear","onMousedownControl","hideNoData","readonly","isReadonly","onKeydown","includes","key","preventDefault","focus","onInput","target","onAfterLeave","onFocusin","onFocusout","relatedTarget","isSelecting","select","index","findIndex","splice","title","nextTick","watch","at","useRender","hasChips","chips","chip","hasList","prepend","append","textFieldProps","filterVTextFieldProps","externalValue","menuIcon","default","eager","menuProps","noDataText","mergeProps","onClick","_ref2","isSelected","onChipClose","stopPropagation","slotProps","VChip","closable","closableChips","size","forwardRefs","defaultFilter","query","toString","toLocaleLowerCase","indexOf","propsFactory","customFilter","Function","customKeyFilter","Object","filterMode","type","noFilter","Boolean","filterItems","options","array","keys","customFiltersLength","loop","i","customMatches","defaultMatches","match","getPropertyFromItem","keyFilter","defaultMatchesLength","customMatchesLength","push","strQuery","filteredMatches","Map","watchEffect","transformedItems","unref","results","forEach","_ref"],"sourceRoot":""}